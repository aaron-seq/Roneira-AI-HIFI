# Production Docker Compose Configuration
# Optimized for production deployment with security and performance enhancements
#
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#
# Author: Aaron Sequeira
# Company: Roneira AI

version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    volumes:
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - frontend_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  backend:
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ML_SERVICE_URL=http://ml-service:5000
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
      - RATE_LIMIT_MAX_REQUESTS=100
    volumes:
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - backend_network
      - database_network
    depends_on:
      - database
      - redis_cache
      - ml-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.your-domain.com`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"

  ml-service:
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
      - GUNICORN_WORKERS=2
      - GUNICORN_TIMEOUT=120
      - GUNICORN_MAX_REQUESTS=1000
      - LOG_LEVEL=info
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  database:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-roneira_production}
      - POSTGRES_USER=${POSTGRES_USER:-roneira_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    volumes:
      - postgres_production_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - database_network
    command: [
      "postgres",
      "-c", "shared_preload_libraries=pg_stat_statements",
      "-c", "pg_stat_statements.track=all",
      "-c", "max_connections=100",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200"
    ]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  redis_cache:
    image: redis:7-alpine
    restart: unless-stopped
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "900", "1"
    ]
    volumes:
      - redis_production_data:/data
    networks:
      - database_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  nginx_proxy:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - frontend_network
      - backend_network
    depends_on:
      - frontend
      - backend
    labels:
      - "traefik.enable=false"

  prometheus_monitoring:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring_network
      - backend_network
    ports:
      - "9090:9090"

  grafana_dashboard:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring_network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus_monitoring

volumes:
  postgres_production_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/postgres_production
  
  redis_production_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/redis_production
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  nginx_cache:
    driver: local

networks:
  frontend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  database_network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16
  
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16