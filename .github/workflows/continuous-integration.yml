name: Continuous Integration and Deployment

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  frontend_quality_checks:
    name: Frontend Code Quality and Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run TypeScript type checking
        working-directory: ./frontend
        run: npm run type-check
        
      - name: Run ESLint code analysis
        working-directory: ./frontend
        run: npm run lint
        
      - name: Run Prettier code formatting check
        working-directory: ./frontend
        run: npm run format -- --check
        
      - name: Execute unit tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage
        
      - name: Build production bundle
        working-directory: ./frontend
        run: npm run build
        
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  backend_quality_checks:
    name: Backend Code Quality and Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_database
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Run TypeScript compilation
        working-directory: ./backend
        run: npm run build
        
      - name: Run ESLint code analysis
        working-directory: ./backend
        run: npm run lint
        
      - name: Execute unit and integration tests
        working-directory: ./backend
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_database
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key
          
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist/
          retention-days: 7

  ml_service_quality_checks:
    name: ML Service Code Quality and Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ml-service/requirements.txt
          
      - name: Install ML service dependencies
        working-directory: ./ml-service
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run Python code formatting check
        working-directory: ./ml-service
        run: black --check .
        
      - name: Run Flake8 code analysis
        working-directory: ./ml-service
        run: flake8 .
        
      - name: Run MyPy type checking
        working-directory: ./ml-service
        run: mypy . --ignore-missing-imports
        
      - name: Execute pytest with coverage
        working-directory: ./ml-service
        run: pytest --cov=. --cov-report=xml --cov-report=html
        
      - name: Upload ML service test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./ml-service/coverage.xml
          flags: ml-service
          name: ml-service-coverage

  security_analysis:
    name: Security Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  container_builds:
    name: Docker Container Builds and Testing
    runs-on: ubuntu-latest
    needs: [frontend_quality_checks, backend_quality_checks, ml_service_quality_checks]
    
    strategy:
      matrix:
        service: [backend, ml-service]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract container metadata
        id: container_metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container_metadata.outputs.tags }}
          labels: ${{ steps.container_metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration_testing:
    name: End-to-End Integration Testing
    runs-on: ubuntu-latest
    needs: [container_builds]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Start application stack with Docker Compose
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          sleep 30  # Allow services to start
          
      - name: Wait for services to be healthy
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:5000/health; do sleep 5; done'
          
      - name: Run API integration tests
        run: |
          curl -X POST http://localhost:3001/api/predict \
            -H "Content-Type: application/json" \
            -d '{"ticker": "AAPL", "days": 1}' | jq .
            
      - name: Stop application stack
        if: always()
        run: docker-compose down

  deployment_staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [integration_testing]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment commands here
          
  deployment_production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: [integration_testing]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands here