name: CI Pipeline

# Trigger on push to main and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Allow manual workflow dispatch
  workflow_dispatch:

jobs:
  # Frontend tests and linting
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm run test -- --coverage --watchAll=false
      
      - name: Build application
        run: npm run build
        env:
          VITE_API_BASE_URL: http://localhost:3001
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend tests and linting
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run linter
        run: npm run lint
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Run unit tests
        run: npm run test -- --coverage
        env:
          NODE_ENV: test
          ML_SERVICE_URL: http://localhost:5000
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          ML_SERVICE_URL: http://localhost:5000
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # ML service tests and linting
  ml-service:
    name: ML Service CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./ml-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run linting with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run type checking with mypy
        run: |
          pip install mypy
          mypy app.py pdm_strategy_engine.py --ignore-missing-imports
        continue-on-error: true
      
      - name: Run tests with pytest
        run: |
          pytest test_ml_service.py -v --cov=app --cov=pdm_strategy_engine --cov-report=xml --cov-report=html
        env:
          FLASK_ENV: testing
          PYTHONPATH: .
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./ml-service/coverage.xml
          flags: ml-service
          name: ml-service-coverage

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [frontend, backend, ml-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: false
          tags: roneira-ai-hifi-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration test with docker-compose
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test environment file
        run: |
          cat > .env << EOF
          NODE_ENV=test
          FLASK_ENV=testing
          POSTGRES_DB=roneira_test
          POSTGRES_USER=test_user
          POSTGRES_PASSWORD=test_pass
          REDIS_PASSWORD=test_redis
          JWT_SECRET=test_jwt_secret
          ML_SERVICE_URL=http://ml-service:5000
          CORS_ORIGIN=http://frontend:3000
          HUGGING_FACE_API_KEY=test_key
          ALPHA_VANTAGE_API_KEY=demo
          EOF
      
      - name: Start services with docker-compose
        run: |
          docker-compose up -d --build
          sleep 30  # Wait for services to start
      
      - name: Run health checks
        run: |
          # Test backend health
          curl -f http://localhost:3001/health || exit 1
          
          # Test ML service health
          curl -f http://localhost:5000/health || exit 1
          
          # Test frontend (basic connectivity)
          curl -f http://localhost:3000 || exit 1
      
      - name: Run API integration tests
        run: |
          # Test stock prediction endpoint
          curl -X POST http://localhost:3001/api/predict \
            -H "Content-Type: application/json" \
            -d '{"ticker": "AAPL", "include_pdm": false}' \
            -f || exit 1
          
          # Test PDM scan endpoint
          curl -X GET http://localhost:3001/api/pdm_scan -f || exit 1
      
      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service, docker, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check deployment files
        run: |
          # Check required deployment files exist
          test -f docker-compose.yml
          test -f frontend/package.json
          test -f backend/package.json
          test -f ml-service/requirements.txt
          test -f README.md
          test -f docs/api-endpoints.md
      
      - name: Validate environment templates
        run: |
          # Check environment templates exist
          test -f .env.example || echo "Warning: .env.example not found"
          test -f frontend/.env.example || echo "Warning: frontend/.env.example not found"
          test -f backend/.env.example || echo "Warning: backend/.env.example not found"
          test -f ml-service/.env.example || echo "Warning: ml-service/.env.example not found"
      
      - name: Check for sensitive data
        run: |
          # Ensure no secrets in code
          ! grep -r "password\|secret\|key" --include="*.js" --include="*.ts" --include="*.py" . || echo "Warning: Potential secrets found"
      
      - name: Deployment ready notification
        run: |
          echo "All checks passed. Ready for deployment to:"
          echo "- Frontend: Vercel"
          echo "- Backend: Railway/Render"
          echo "- ML Service: Railway/Render"

# Environment variables for the entire workflow
env:
  FORCE_COLOR: 1
  CI: true